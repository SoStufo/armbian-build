name: "Build armbian"

on:
  workflow_dispatch:
    inputs:
      armbian_build_type:
        description: 'Build'
        required: true
        type: choice
        options:
          - image
          - kernel
          - dts-check
      armbian_board:
        description: 'Board target'
        required: true
        default: 'rk3328-trn9'
      armbian_revision:
        description: 'Armbian revision (last stable or last nightly)'
        required: false
        default: 'stable'
        type: choice
        options:
          - stable
          - nightly
      armbian_release:
        description: 'Select OS Release'
        required: false
        default: 'bookworm'
        type: choice
        options:
          - sid
          - trixie
          - bookworm
          - noble
          - jammy
      armbian_kernel_branch:
        description: 'Kernel branch'
        required: false
        default: 'current'
        type: choice
        options:
          - legacy
          - vendor
          - current
          - edge
      armbian_ui:
        description: 'Armbian user interface'
        required: false
        default: 'server'
        type: choice
        options:
          - minimal
          - server
          - desktop
      armbian_desktop_enviroment:
        description: 'Desktop Enviroment'
        required: false
        default: 'xfce'
        type: choice
        options:
          - xfce
          - gnome
          - cinnamon
          - i3-wm
          - kde-plasma
          - kde-neon
          - mate
          - budgie
          - xmonad
      armbian_rootfs_type:
        description: 'Root filesystem type'
        required: false
        default: 'ext4'
        type: choice
        options:
          - ext4
          - btrfs
          - nilfs2
          - xfs
          - nfs
      armbian_btrfs_compression:
        description: 'Btrfs filesystem compression'
        required: false
        default: 'zlib'
        type: choice
        options:
          - lzo
          - none
          - zlib
          - zstd
      armbian_cryptroot_enable:
        description: 'Encrypt root with LUKS'
        required: false
        default: 'false'
        type: choice
        options:
          - false
          - true

env:
  TZ: America/New_York

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: FreeSpaceBefore
        run: |
          echo "Free space:"
          df -hT

      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 1
          temp-reserve-mb: 1
          swap-size-mb: 1
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: FreeSpaceAfter
        run: |
          echo "Free space:"
          df -hT

      - name: "Checkout Armbian build framework"
        uses: actions/checkout@v4
        with:
          ref: main
          clean: false
          path: build

      - name: Initialization environment
        shell: bash
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          df -hT
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL || true
          sudo docker image prune --all --force || true
          sudo docker builder prune -a || true
          docker rmi $(docker images -q) 2>/dev/null  || true
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"  || true
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null  || true
          sudo swapoff -a || true
          sudo rm -f /swapfile /mnt/swapfile || true
          sudo -E apt -y update
          sudo -E apt -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt -y install 7zip jq grep
          sudo -E apt -y install $(curl -fsSL https://raw.githubusercontent.com/SoStufo/tvbox-armbian/refs/heads/main/compile-kernel/tools/script/ubuntu2204-build-armbian-depends)
          sudo -E systemctl daemon-reload
          #sudo -E apt -y full-upgrade
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile} || true
          sudo rm -rf ~/{.cargo,.dotnet,.rustup} || true
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Compile Armbian [ ${{ inputs.armbian_board }}_${{ inputs.armbian_release }}_${{ inputs.armbian_revision }}_${{ inputs.armbian_kernel_branch }}_${{ inputs.armbian_rootfs_type }}_encryptrootfs-${{ inputs.armbian_cryptroot_enable }}_${{ inputs.armbian_ui }} ]
        shell: bash
        id: compile
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          ## COMPILE_ARGUMENTS
          REVISION="$(curl -fsSL "https://raw.githubusercontent.com/armbian/os/refs/heads/main/${{ inputs.armbian_revision }}.json" | jq -r '.version')"
          COMPILE_ARGS="BOARD=${{ inputs.armbian_board }} \
                        REVISION=$REVISION \
                        ARTIFACT_IGNORE_CACHE=yes \
                        USE_TMPFS=no \
                        RELEASE=${{ inputs.armbian_release }} \
                        BRANCH=${{ inputs.armbian_kernel_branch }} \
                        KERNEL_CONFIGURE=no \
                        BSPFREEZE=no \
                        INSTALL_HEADERS=no \
                        HOST=armbian \
                        EXPERT=yes \
                        SHARE_LOG=yes \
                        CONSOLE_AUTOLOGIN=yes \
                        EXTRAWIFI=yes \
                        COMPRESS_OUTPUTIMAGE="sha,gpg,img,xz" \
                        IMAGE_XZ_COMPRESSION_RATIO=9 \
                        ROOTFS_TYPE=${{ inputs.armbian_rootfs_type }}"
          # BTRFS_COMPRESSION
          if [ "${{ inputs.armbian_rootfs_type }}" == "btrfs" ];then
            COMPILE_ARGS="$COMPILE_ARGS \
                            BTRFS_COMPRESSION=${{ inputs.armbian_btrfs_compression }}"
          fi
          # CRYPTROOT
          if [ "${{ inputs.armbian_cryptroot_enable }}" == "true" ];then
            COMPILE_ARGS="$COMPILE_ARGS \
                            CRYPTROOT_ENABLE=yes \
                            CRYPTROOT_PASSPHRASE=CryptRootPassword \
                            CRYPTROOT_SSH_UNLOCK_PORT=2022 \
                            CRYPTROOT_MAPPER=armbian-root \
                            CRYPTROOT_SSH_UNLOCK=yes"
          fi
          # ARMBIAN_UI
          case "${{ inputs.armbian_ui }}" in
            minimal)
              COMPILE_ARGS="$COMPILE_ARGS \
                              BUILD_MINIMAL=yes \
                              BUILD_DESKTOP=no"
              ;;
            server)
              COMPILE_ARGS="$COMPILE_ARGS \
                              BUILD_MINIMAL=no \
                              BUILD_DESKTOP=no"
              ;;
            desktop)
              COMPILE_ARGS="$COMPILE_ARGS \
                              BUILD_DESKTOP=yes \
                              BUILD_MINIMAL=no \
                              DESKTOP_APPGROUPS_SELECTED= \
                              DESKTOP_ENVIRONMENT=${{ inputs.armbian_desktop_enviroment }} \
                              DESKTOP_ENVIRONMENT_CONFIG_NAME=config_base"
              ;;
          esac

          ## COMPILE
          case "${{ inputs.armbian_build_type }}" in
            kernel)
              COMPILE_ARGS="kernel BOARD=${{ inputs.armbian_board }} \
                                   BRANCH=${{ inputs.armbian_kernel_branch }} \
                                   SHARE_LOG=yes \
                                   ARTIFACT_IGNORE_CACHE=yes"
              ;;
            dts-check)
              COMPILE_ARGS="dts-check BOARD=${{ inputs.armbian_board }} \
                                      BRANCH=${{ inputs.armbian_kernel_branch }} \
                                      SHARE_LOG=yes \
                                      ARTIFACT_IGNORE_CACHE=yes"
            ;;
          esac

          df -hT
          cd build
          ./compile.sh $COMPILE_ARGS
          cd ..

          ## PREPARE_ARTIFACTS
          ARTIFACTS_PATH="./release/artifacts"
          if [ -d ./release ];then rm -rf ./release;fi
          mkdir -p "$ARTIFACTS_PATH"
          # DEBS
          for i in debs; do
            if [ ! -d "./build/output/$i" ];then
              echo "Directory ./build/output/$i doesn't exist, skip."
              continue
            else
              echo "Compressing: ./build/output/$i"
              ARCHIVE="$ARTIFACTS_PATH/Armbian-unofficial_${REVISION}_${{ inputs.armbian_board }}_${{ inputs.armbian_release }}_${{ inputs.armbian_kernel_branch }}_${i}.7z"
              7z a -t7z -mx=9 -myx=9 -ms=4g -mqs=on -mf=on -mhc=on -m0=LZMA2 -mmt=on -mmtf=on -md=64m -mfb=64 -bb0 "$ARCHIVE" ./build/output/$i/
            fi
          done

          ## RELEASE_TITTLE - RELEASE_BODY
          echo "### Armbian ${{ inputs.armbian_revision }}" > ./release/body.md
          if [ "${{ inputs.armbian_cryptroot_enable }}" == "true" ];then
            echo "- CRYPTROOT_PASSPHRASE     : CryptRootPassword" >> ./release/body.md
            echo "- CRYPTROOT_SSH_UNLOCK_PORT: 2022" >> ./release/body.md
            echo "- CRYPTROOT_MAPPER         : armbian-root" >> ./release/body.md

            echo "build_tag=Armbian-unofficial_v${REVISION}_${{ inputs.armbian_rootfs_type }}_encrypted-root" >> ${GITHUB_OUTPUT}
          else
            echo "build_tag=Armbian-unofficial_v${REVISION}_${{ inputs.armbian_rootfs_type }}" >> ${GITHUB_OUTPUT}
          fi

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Upload Armbian image to Release
        uses: ncipollo/release-action@main
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        with:
          tag: ${{ steps.compile.outputs.build_tag }}
          artifacts: "release/artifacts/*, build/output/images/*.img*"
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          bodyFile: release/body.md
